# ==============================================================================
# PH·∫¶N 1: IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT
# ==============================================================================
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Perceptron
import ipywidgets as widgets
from IPython.display import display, clear_output

# ==============================================================================
# PH·∫¶N 2: T·∫†O D·ªÆ LI·ªÜU V√Ä HU·∫§N LUY·ªÜN M√î H√åNH (Gi·ªØ nguy√™n)
# ==============================================================================

# --- T·∫°o d·ªØ li·ªáu m·∫´u ---
n_samples = 100
sizes = np.random.randint(9, 15, n_samples)
weights = np.random.uniform(150, 500, n_samples)
surfaces = np.random.randint(1, 4, n_samples)
colors = np.random.randint(1, 4, n_samples)
X = np.column_stack((sizes, weights, surfaces, colors))

# --- H√†m ph√¢n lo·∫°i v√† d√°n nh√£n ---
def get_size_class(cm):
    if cm >= 13: return 1
    elif cm >= 11: return 2
    else: return 3
def get_weight_class(g):
    if g >= 350: return 1
    elif g >= 250: return 2
    else: return 3
y = []
for features in X:
    c1 = get_size_class(features[0])
    c2 = get_weight_class(features[1])
    c3 = features[2]
    c4 = features[3]
    final_class = int(np.round(np.mean([c1, c2, c3, c4])))
    if final_class < 1: final_class = 1
    if final_class > 3: final_class = 3
    y.append(final_class)
y = np.array(y)

# --- Hu·∫•n luy·ªán m√¥ h√¨nh ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
model = Perceptron(max_iter=1000, eta0=0.1, random_state=42)
model.fit(X_train_scaled, y_train)

print("‚úÖ H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán v√† s·∫µn s√†ng ƒë·ªÉ ƒë√°nh gi√°. ü•≠")
print("-" * 60)


# ==============================================================================
# PH·∫¶N 3: GIAO DI·ªÜN K·∫æT H·ª¢P PH√ÇN LO·∫†I V√Ä PH√ÇN T√çCH
# ==============================================================================

# --- ƒê·ªãnh nghƒ©a m√†u s·∫Øc ch·ªß ƒë·∫°o ---
COLOR_PRIMARY = '#4CAF50' # Xanh l√° c√¢y
COLOR_SECONDARY = '#FFC107' # V√†ng xo√†i
COLOR_DANGER = '#DC3545' # ƒê·ªè c·∫£nh b√°o
COLOR_SUCCESS = '#28A745' # Xanh l√° th√†nh c√¥ng

# --- T·∫°o c√°c th√†nh ph·∫ßn (widgets) ---
widget_style = {'description_width': '40%'}
widget_layout = widgets.Layout(width='48%')

title = widgets.HTML(f"<h3 style='color: {COLOR_PRIMARY};'><b style='font-size:24px;'>ü•≠ H·ªÜ TH·ªêNG ƒê√ÅNH GI√Å CH·∫§T L∆Ø·ª¢NG XO√ÄI ü•≠</b></h3>")
size_input = widgets.IntText(value=11, description='K√≠ch th∆∞·ªõc (cm):', style=widget_style, layout=widget_layout)
weight_input = widgets.FloatText(value=300.0, description='Kh·ªëi l∆∞·ª£ng (g):', style=widget_style, layout=widget_layout)
surface_dropdown = widgets.Dropdown(options=[('Kh√¥ng h∆∞ h·ªèng', 1), ('Khuy·∫øt ƒëi·ªÉm nh·ªè', 2), ('H∆∞ h·ªèng n·∫∑ng', 3)], value=1, description='T√¨nh tr·∫°ng b·ªÅ m·∫∑t:', style=widget_style, layout=widget_layout)
color_dropdown = widgets.Dropdown(options=[('V√†ng (Ch√≠n t·ªõi)', 1), ('Xanh (Ch∆∞a ch√≠n)', 2), ('Cam (Ch√≠n qu√°)', 3)], value=1, description='M√†u s·∫Øc (ƒê·ªô ch√≠n):', style=widget_style, layout=widget_layout)
predict_button = widgets.Button(description='Th·ª±c Hi·ªán Ph√¢n T√≠ch', button_style='success', icon='cogs', layout=widgets.Layout(width='98%', margin='20px 0 0 0'))
output_area = widgets.Output(layout=widgets.Layout(margin='20px 0 0 0', padding='15px', border=f'1px solid {COLOR_PRIMARY}', width='98%', background_color='#F8F9FA'))


# --- ƒê·ªãnh nghƒ©a h√†m x·ª≠ l√Ω s·ª± ki·ªán (ƒê√É C·∫¨P NH·∫¨T) ---
def on_button_clicked(b):
    size, weight, surface, color = size_input.value, weight_input.value, surface_dropdown.value, color_dropdown.value
    
    # --- B∆Ø·ªöC 1: D√ôNG M√î H√åNH ƒê·ªÇ PH√ÇN LO·∫†I ---
    new_mango_scaled = scaler.transform(np.array([[size, weight, surface, color]]))
    predicted_class = model.predict(new_mango_scaled)[0]

    # --- B∆Ø·ªöC 2: PH√ÇN T√çCH CHUY√äN S√ÇU ƒê·ªÇ T∆Ø V·∫§N ---
    analysis_report = ""
    recommendation = ""
    storage_guide = ""
    result_title_color = COLOR_PRIMARY

    if surface == 3:
        analysis_report = "<b>Ph√¢n t√≠ch:</b> B·ªÅ m·∫∑t v·ªè c√≥ d·∫•u hi·ªáu h∆∞ h·ªèng c∆° h·ªçc nghi√™m tr·ªçng..."
        recommendation = "<b>K·∫øt lu·∫≠n:</b> S·∫£n ph·∫©m kh√¥ng ƒë·∫°t ti√™u chu·∫©n. <b><u>Khuy·∫øn ngh·ªã: Kh√¥ng l·ª±a ch·ªçn.</u></b>"
        storage_guide = "<b>B·∫£o qu·∫£n:</b> C·∫ßn ƒë∆∞·ª£c lo·∫°i b·ªè..."
        result_title_color = COLOR_DANGER
    elif color == 3:
        analysis_report = "<b>Ph√¢n t√≠ch:</b> M√†u cam ƒë·∫≠m l√† ch·ªâ b√°o s·∫£n ph·∫©m ƒë√£ b∆∞·ªõc v√†o giai ƒëo·∫°n ch√≠n qu√°..."
        recommendation = "<b>K·∫øt lu·∫≠n:</b> Ch·∫•t l∆∞·ª£ng ƒëang suy gi·∫£m nhanh. <b><u>Khuy·∫øn ngh·ªã: Ch·ªâ l·ª±a ch·ªçn ƒë·ªÉ s·ª≠ d·ª•ng ngay.</u></b>"
        storage_guide = "<b>B·∫£o qu·∫£n:</b> Y√™u c·∫ßu b·∫£o qu·∫£n l·∫°nh v√† s·ª≠ d·ª•ng trong v√≤ng 24 gi·ªù."
        result_title_color = COLOR_SECONDARY
    elif color == 1:
        if surface == 1:
            analysis_report = "<b>Ph√¢n t√≠ch:</b> S·∫£n ph·∫©m ƒë·∫°t c√°c ch·ªâ s·ªë t·ªëi ∆∞u..."
            recommendation = "<b>K·∫øt lu·∫≠n:</b> S·∫£n ph·∫©m ƒë·∫°t ch·∫•t l∆∞·ª£ng cao. <b><u>Khuy·∫øn ngh·ªã: ∆Øu ti√™n l·ª±a ch·ªçn h√†ng ƒë·∫ßu.</u></b>"
        else:
            analysis_report = "<b>Ph√¢n t√≠ch:</b> B·ªÅ m·∫∑t v·ªè c√≥ khuy·∫øt ƒëi·ªÉm nh·ªè kh√¥ng ·∫£nh h∆∞·ªüng ƒë√°ng k·ªÉ..."
            recommendation = "<b>K·∫øt lu·∫≠n:</b> Ch·∫•t l∆∞·ª£ng ·ªü m·ª©c ch·∫•p nh·∫≠n ƒë∆∞·ª£c. <b><u>Khuy·∫øn ngh·ªã: C√≥ th·ªÉ l·ª±a ch·ªçn.</u></b>"
        storage_guide = "<b>B·∫£o qu·∫£n:</b> T·ªëi ∆∞u ·ªü nhi·ªát ƒë·ªô ph√≤ng (2-3 ng√†y) ho·∫∑c b·∫£o qu·∫£n l·∫°nh (5-7 ng√†y)."
        result_title_color = COLOR_SUCCESS
    elif color == 2:
        analysis_report = "<b>Ph√¢n t√≠ch:</b> V·ªè m√†u xanh l√† ch·ªâ b√°o xo√†i ch∆∞a ƒë·∫°t ƒë·ªô ch√≠n th∆∞∆°ng ph·∫©m..."
        if surface == 1:
            recommendation = "<b>K·∫øt lu·∫≠n:</b> S·∫£n ph·∫©m c√≥ ti·ªÅm nƒÉng t·ªët sau ·ªß ch√≠n. <b><u>Khuy·∫øn ngh·ªã: L·ª±a ch·ªçn ƒë·ªÉ ·ªß ch√≠n ho·∫∑c ƒÉn chua.</u></b>"
        else:
            recommendation = "<b>K·∫øt lu·∫≠n:</b> Ch·∫•t l∆∞·ª£ng ti·ªÅm nƒÉng ·ªü m·ª©c trung b√¨nh. <b><u>Khuy·∫øn ngh·ªã: C√¢n nh·∫Øc k·ªπ l∆∞·ª°ng.</u></b>"
        storage_guide = "<b>B·∫£o qu·∫£n ƒë·ªÉ ·ªß ch√≠n:</b> Gi·ªØ ·ªü nhi·ªát ƒë·ªô ph√≤ng, n∆°i tho√°ng m√°t. Th·ªùi gian ·ªß d·ª± ki·∫øn: 3-5 ng√†y."
        result_title_color = '#007BFF'

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    with output_area:
        clear_output(wait=True)
        html_output = f"""
        <div>
            <h4 style='text-align: center; color: {result_title_color}; font-size: 20px;'>B√ÅO C√ÅO ƒê√ÅNH GI√Å CH·∫§T L∆Ø·ª¢NG S·∫¢N PH·∫®M</h4>
            
            <div style='background-color: {result_title_color}; color: white; padding: 10px; margin: 10px 0; border-radius: 5px; text-align: center;'>
                <span style='font-size: 18px;'>PH√ÇN LO·∫†I THEO M√î H√åNH: <b>ü•≠ XO√ÄI LO·∫†I {predicted_class} ü•≠</b></span>
            </div>
            
            <hr style='border-top: 1px solid {COLOR_PRIMARY};'>
            <div style='text-align: left;'>
                <p><strong>1. Ph√¢n T√≠ch Chuy√™n S√¢u:</strong></p>
                <p>{analysis_report}</p>
                <br>
                <p><strong>2. K·∫øt Lu·∫≠n & Khuy·∫øn Ngh·ªã:</strong></p>
                <p style='color: {result_title_color};'>{recommendation}</p>
                <br>
                <p><strong>3. H∆∞·ªõng D·∫´n B·∫£o Qu·∫£n & S·ª≠ D·ª•ng:</strong></p>
                <p>{storage_guide}</p>
            </div>
        </div>
        """
        display(widgets.HTML(value=html_output))

predict_button.on_click(on_button_clicked)

# --- S·∫Øp x·∫øp layout b·∫±ng Flexbox ---
row_layout_with_margin = widgets.Layout(display='flex', flex_flow='row', justify_content='space-between', width='100%', margin='20px 0 0 0')
row1 = widgets.Box([size_input, surface_dropdown], layout=row_layout_with_margin)
row2 = widgets.Box([weight_input, color_dropdown], layout=widgets.Layout(display='flex', flex_flow='row', justify_content='space-between', width='100%', margin='10px 0 0 0'))
app_layout = widgets.VBox([title, row1, row2, predict_button, output_area], layout=widgets.Layout(align_items='center', width='700px', border=f'2px solid {COLOR_PRIMARY}', padding='20px', background_color='#E8F5E9'))

# --- Hi·ªÉn th·ªã giao di·ªán ---
display(app_layout)